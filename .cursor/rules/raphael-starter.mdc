---
description: 
globs: 
alwaysApply: true
---
# 项目最终AI协作规则

### **Part 1: AI协作协议 (我们的工作方式)**

你好！作为本项目的AI全栈开发助手，这是我们的协作协议。请在每次接收新任务时，严格遵循此协议。

**核心工作流程：**

1. **接收任务:** 我将直接在对话中用自然语言向你描述一个开发需求。
2. **评估任务复杂度:**
   - **简单任务:** 如果需求明确、范围小（例如：修改一个组件的文本、调整样式、修复一个已知的小bug），你应直接执行。
   - **复杂任务:** 如果需求涉及多个文件、新功能的创建、复杂的逻辑或重构，你必须使用“草稿纸”模式。
3. **执行任务:**
   - **对于简单任务:**
     1. 在对话中直接告诉我你将要进行的修改。
     2. 提供修改后的完整代码文件或清晰的代码片段，并明确指出文件路径。
   - **对于复杂任务 (草稿纸模式):**
     1. **创建工作区:** 在项目根目录下创建一个本次任务专属的工作目录：`.ai-workspace/{task-summary}/`。
     2. **记录初始状态:** 在工作区内创建一个 `changelog.md` 文件。在此文件中，记录下本次任务将要修改的核心文件的**初始状态快照**。
     3. **制定计划:** 在工作区内创建一个 `todo.md` 文件，将我的需求拆解成详细的待办清单。
     4. **请求确认:** 在对话中向我展示这份待办清单，并等待我的确认。
     5. **逐步执行:** 在我确认计划后，严格按照清单顺序逐项完成。每完成一项，就在对话中用 `[x]` 标记，并展示你产出的代码。
     6. **记录修改:** 每完成一个重要的代码修改后，向我申请：“我已完成[...]修改，是否可以将其记录到 `changelog.md`？”。得到你的允许后，将修改详情追加到 `changelog.md` 的“修改历程”部分。
     7. **任务完成:** 所有清单项完成后，你可以选择性删除对应的工作目录。

### **Part 2: 项目核心技术栈**

- **框架 (Framework):** Next.js (App Router)
- **语言 (Language):** TypeScript
- **UI库 (UI Library):** React
- **样式 (Styling):** Tailwind CSS, shadcn/ui
- **认证 (Authentication):** Supabase Auth (Google, GitHub, Email)
- **数据库 (Database):** Supabase (PostgreSQL)
- **支付 (Payments):** Creem

### **Part 3: 编码与开发规范 (技术准则)**

#### **编码标准**

- **语言:** 必须使用 TypeScript。
- **组件:** 必须使用函数组件和 Hooks，严禁使用类组件。
- **命名:** 变量和函数名使用 `camelCase`，组件名和类型定义使用 `PascalCase`。
- **样式:** 必须使用 Tailwind CSS 进行样式设计，并遵循 shadcn/ui 组件模式。
- **主题:** 所有UI组件必须同时兼容深色/浅色主题。

#### **文件结构**

- **`app/`:** Next.js App Router 页面和布局。
  - `app/(auth-pages)/`: 认证相关页面。
  - `app/auth/`: 认证回调处理。
  - `app/dashboard/`: 受保护的用户面板页面。
  - `app/api/webhooks/creem/`: Creem webhook 处理路由。
- **`components/`:** 可复用的 React 组件。
- **`utils/`:** 通用函数和辅助工具。
  - `utils/supabase/`: Supabase 客户端配置和辅助函数。
  - `utils/creem/`: Creem 相关工具函数。
- **`hooks/`:** 自定义 React Hooks。
- **`types/`:** 全局 TypeScript 类型定义。

#### **核心功能实现**

- **身份验证:**
  - 必须使用服务器操作 (Server Actions) 进行登录/注册等操作。
  - 必须在 `middleware.ts` 中实现路由保护，检查用户认证状态。
- **订阅和支付 (Creem):**
  - 必须使用 Creem 处理支付和订阅。
  - Webhook (`/api/webhooks/creem/`) 必须能正确处理各类事件（如 `checkout.completed`, `subscription.active`, `subscription.canceled` 等）。
  - 必须确保数据库中的订阅状态与Creem同步。
- **服务器操作 (Server Actions):**
  - 表单提交必须使用服务器操作。
  - 必须对输入数据进行验证。
  - 必须包含 `try-catch` 块，并使用 `form-message.tsx` 组件向用户展示清晰的错误信息。

#### **开发实践与质量保证**

- **添加新功能时:**
  1. 遵循现有文件结构。
  2. 添加必要的 TypeScript 类型。
  3. 实现完整的错误处理。
  4. 遵循现有命名约定。
- **错误处理:**
  - 所有异步操作（特别是API调用和数据库操作）都必须包含在 `try-catch` 块中。
- **测试:**
  - 在开发关键功能（如认证、支付）后，需考虑其测试场景，包括成功流程、失败流程和边缘情况。

#### **重要注意事项 (安全与陷阱)**

- **安全:**
  - 严禁在客户端代码中暴露 `SUPABASE_SERVICE_ROLE_KEY` 或 `CREEM_API_KEY` 等敏感密钥。
  - 必须在处理 Webhook 时验证其签名，防止伪造请求。
  - 所有需要权限的操作，必须在服务端进行用户身份和权限校验。
- **一致性:**
  - 不要混合使用不同的样式方法（例如，在Tailwind项目中引入大量的普通CSS或CSS-in-JS）。
  - 遵循代码库中已建立的设计模式和代码风格。 
- 对于环境变量，你没有权限查看和编辑，请直接编辑更目录中不带“.”的env文件作为环境变量

### **Part 4: Supabase 数据库结构**

- **`customers` 表:** 关联 `auth.users`，存储用户积分和Creem客户信息。
- **`credits_history` 表:** 记录积分增减历史。
- **`subscriptions` 表:** 存储用户订阅状态。

*(详细的建表SQL语句已存档，你在需要时可以向我询问)*